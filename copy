#include <bits/stdc++.h>

using namespace std;


void dij(int src, vector<int>& res, const vector<vector<pair<int, int>>>& graph, const vector<int>& dis) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; 
    pq.push({0, src}); 

    while (!pq.empty()) {
        auto [time, node] = pq.top();
        pq.pop();

        if (time >= dis[node]) {
            continue; 
        }

        if (time >= res[node]) {
            continue; 
        }

        res[node] = time;

        for (const auto& i : graph[node]) {
            int neighbor_node = i.first;
            int edge_length = i.second;
            pq.push({time + edge_length, neighbor_node});
        }
    }
}

class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        
        vector<vector<pair<int, int>>> graph(n); 
        
        for (auto i : edges) {
            int u = i[0];
            int v = i[1];
            int length = i[2];
            graph[u].push_back({v, length});
            graph[v].push_back({u, length});
        }

        vector<int> dis(disappear.begin(), disappear.end());

        vector<int> res(n, INT_MAX);

        
        dij(0, res, graph, dis);

       
        for (int i = 0; i < n; ++i) {
            if (res[i] == INT_MAX) {
                res[i] = -1;
            }
        }

        return res;
    }
};